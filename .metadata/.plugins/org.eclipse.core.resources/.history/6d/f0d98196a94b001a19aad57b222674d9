package com.prao.ainterview.tmdb.automation.movies;
/*import com.cybozu.labs.langdetect.Detector; 
import com.cybozu.labs.langdetect.DetectorFactory; 
import com.cybozu.labs.langdetect.Language;*/
/**
 * Created by Pragna Rao on 02/06/2020.
 */
import static io.restassured.RestAssured.given;

import java.net.URI;
import java.util.Map;

import org.apache.http.HttpStatus;
import org.objectweb.asm.Type;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.prao.ainterview.tmdb.automation.util.TmdbTestUtil;

import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class MoviesAPITest extends TmdbTestUtil{
	
	private static final String  INTRNL_LANG_CODE = "sa";
	URI popularMovieUri,detailsMovieUri;
	/*
	private static final Long FQ_TIME_INTERVAL = (long) (15*60*1000);
	private static final Long TS_HOURLY_OFFSET = (long) (60*60*1000);
	private static final Long TS_DAILY_OFFSET = (long) (24*60*60*1000);
	private static final Long TS_MONTHLY_OFFSET = (long) (30*24*60*60*1000);
	private static final Long TS_MIN_OFFSET = (long) (15*60*1000);
	public static Properties context = null;*/
	
	
	private void setUp() {
		popularMovieUri = URI.create(getProperty("tmdb.base.uri")+ getProperty("popular.get.uri"));
		detailsMovieUri = URI.create(getProperty("tmdb.base.uri")+ getProperty("details.get.uri")); 
		System.out.println(popularMovieUri);
	}
	
	//Set of positive test cases
	/**
	 * @throws Exception
	 * Verify International code works for supported fields :overview.
	 * expected status code :200 OK  
	 * api_key=fb54f1b85b06b34f0b5c921561fc3675&language=hi&page=1
	 */
	@Test
	public void testGetDetailsForMovieIDTwo() throws Exception {
		setUp();

		Response  response =	given().
				queryParam("api_key", getProperty("APIKey")).
				queryParam("language", "en").expect().statusCode(200).
				when().
				get(detailsMovieUri +"2");
	
		JsonPath jsonPath = response.jsonPath();
		
		Map<String, String> prodCompanies = (Map<String, String>) jsonPath.getList("production_companies").get(0);
		
		Assert.assertEquals(jsonPath.getString("title"), "Ariel");
		Assert.assertEquals(jsonPath.getString("adult"), "false");
		Assert.assertEquals(prodCompanies.get("name"), "Villealfa Filmproductions");
		Assert.assertEquals(response.getStatusCode(),HttpStatus.SC_OK, "status code was not Httpstatus.SC_OK");
	}
	
	/**
	 * @throws Exception
	 * Verify International code works for supported fields :overview.
	 * expected status code :200 OK  
	 * api_key=fb54f1b85b06b34f0b5c921561fc3675&language=hi&page=1
	 */
	@Test
	public void testGetPopularMovieWorksForInternalLanguageCode() throws Exception {
		setUp();

		Response  response =	given().
				queryParam("api_key", getProperty("APIKey")).
				queryParam("language", INTRNL_LANG_CODE).expect().statusCode(200).
				when().
				get(popularMovieUri);
		
		Assert.assertEquals(response.getStatusCode(),HttpStatus.SC_OK, "status code was not Httpstatus.SC_OK");
	}
	
	/**
	 * @throws Exception
	 * Verify International code works for 2 digitcode.
	 * expected status code :200 OK  
	 * api_key=fb54f1b85b06b34f0b5c921561fc3675&language=en&page=1
	 */
	@Test
	public void testGetPopularMovieWorksFor2DigitCode() throws Exception {
		setUp();

		Response  response =	given().
				queryParam("api_key", getProperty("APIKey")).
				queryParam("language", "en").expect().statusCode(200).
				when().
				get(popularMovieUri);
	
		Assert.assertEquals(response.getStatusCode(),HttpStatus.SC_OK, "status code was not Httpstatus.SC_OK");
	}
	
	//Set of negative cases and needs improvement
	/***
	 * 
	 * @throws Exception
	 * 
	 *  422 (Unprocessable Entity) expected for length of character exceeding whats supported.
	 *  A better definition and implementation needed.
	 */
	@Test
	public void testGetMovieDetailsByIdShouldHaveLimitOnIDCharacterLength() throws Exception {
		setUp();
		String moveID = "2222222222222222222222222";
		Response  response =	given().
				queryParam("api_key", getProperty("APIKey")).
				queryParam("language", "en").expect().statusCode(200).
				when().
				get(detailsMovieUri+moveID);
	
		Assert.assertEquals(response.getStatusCode(),HttpStatus.SC_UNPROCESSABLE_ENTITY, "status code was not Httpstatus.SC_UNPROCESSABLE_ENTITY 422 (Unprocessable Entity) status code means");
	}
	
	/*
	 * public void init(String profileDirectory) throws LangDetectException {
	 * DetectorFactory.loadProfile(profileDirectory); }
	 * 
	 * public String detect(String text) throws LangDetectException { Detector
	 * detector = DetectorFactory.create(); detector.append(text); return
	 * detector.detect(); }
	 * 
	 * public ArrayList detectLangs(String text) throws LangDetectException {
	 * Detector detector = DetectorFactory.create(); detector.append(text); return
	 * detector.getProbabilities(); }
	 */

	
}
