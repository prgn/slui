package com.prao.ainterview.tmdb.automation.movies;
/*import com.cybozu.labs.langdetect.Detector; 
import com.cybozu.labs.langdetect.DetectorFactory; 
import com.cybozu.labs.langdetect.Language;*/
/**
 * Created by Pragna Rao on 02/06/2020.
 */
import static io.restassured.RestAssured.given;

import java.net.URI;

import org.apache.http.HttpStatus;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.prao.ainterview.tmdb.automation.util.TmdbTestUtil;

import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class MoviesAPITest extends TmdbTestUtil{
	
	private static final String  INTRNL_LANG_CODE = "sa";
	URI popularMovieUri;
	/*
	private static final Long FQ_TIME_INTERVAL = (long) (15*60*1000);
	private static final Long TS_HOURLY_OFFSET = (long) (60*60*1000);
	private static final Long TS_DAILY_OFFSET = (long) (24*60*60*1000);
	private static final Long TS_MONTHLY_OFFSET = (long) (30*24*60*60*1000);
	private static final Long TS_MIN_OFFSET = (long) (15*60*1000);
	public static Properties context = null;*/
	
	
	private void setUp() {
		popularMovieUri = URI.create(getProperty("tmdb.base.uri")
				+ getProperty("popular.get.uri"));

	}
	
	
	/**
	 * @throws Exception
	 * Verify International 2 digit code works for supported fields :overview.
	 * expected status code :200 OK  
	 * api_key=fb54f1b85b06b34f0b5c921561fc3675&language=hi&page=1
	 */
	@Test
	public void testGetPopularMovieIdWorksForInternalLanguageCode() throws Exception {
		System.out.println ("am in the test");

		Response  response =	given().
				queryParam("api_key", getProperty("APIKey")).
				queryParam("language", INTRNL_LANG_CODE).expect().statusCode(200).
				when().
				get(popularMovieUri);
	
		JsonPath jsonPath = response.jsonPath();
		Assert.assertEquals(response.getStatusCode(),HttpStatus.SC_OK, "status code was not Httpstatus.SC_OK");

		/*
		 * Response response = given(). param("fq","dfdf" ). when().
		 * get(popularMovieUri); JsonPath jsonPath = response.jsonPath();
		 * Assert.assertEquals(response.getStatusCode(),HttpStatus.SC_OK,
		 * "status code was not Httpstatus.SC_OK");
		 * Assert.assertTrue(jsonPath.getString("enterprise_uid").contains(
		 * "ENTERPRISE_4951b25b-3616-30e8-a85d-9239593b35fd")
		 * ,"Enterprise_uid doesnot match");
		 */	//Site name will not be stored as part of tuple.
		//Assert.assertEquals(jsonPath.getString("site_name"),"SunSetSite","Site name SunSetSite doesnot match");
	}
	
	/*
	 * public void init(String profileDirectory) throws LangDetectException {
	 * DetectorFactory.loadProfile(profileDirectory); }
	 * 
	 * public String detect(String text) throws LangDetectException { Detector
	 * detector = DetectorFactory.create(); detector.append(text); return
	 * detector.detect(); }
	 * 
	 * public ArrayList detectLangs(String text) throws LangDetectException {
	 * Detector detector = DetectorFactory.create(); detector.append(text); return
	 * detector.getProbabilities(); }
	 */

	
}
